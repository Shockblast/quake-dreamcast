Only in WinQuake: Makefile
Only in WinQuake: cd_dc.c
diff -u -x '*.o' -B WinQuake.orig/common.c WinQuake/common.c
--- WinQuake.orig/common.c	1999-12-22 00:53:24.000000000 +0900
+++ WinQuake/common.c	2002-07-24 20:10:55.000000000 +0900
@@ -862,8 +862,8 @@
 	while (s != in && *s != '.')
 		s--;
 	
-	for (s2 = s ; *s2 && *s2 != '/' ; s2--)
-	;
+	// for (s2 = s ; *s2 && *s2 != '/' ; s2--) ; default:buggy
+	for(s2=s; s2!=in && *s2 !='/'; s2--) ;
 	
 	if (s-s2 < 2)
 		strcpy (out,"?model?");
@@ -1015,6 +1015,7 @@
 void COM_CheckRegistered (void)
 {
 	int             h;
+#if 0
 	unsigned short  check[128];
 	int                     i;
 
@@ -1038,7 +1039,7 @@
 	for (i=0 ; i<128 ; i++)
 		if (pop[i] != (unsigned short)BigShort (check[i]))
 			Sys_Error ("Corrupted data file.");
-	
+#endif
 	Cvar_Set ("cmdline", com_cmdline);
 	Cvar_Set ("registered", "1");
 	static_registered = 1;
@@ -1405,8 +1406,12 @@
 					else
 					{       // open a new file on the pakfile
 						*file = fopen (pak->filename, "rb");
-						if (*file)
+						if (*file) {
+#if	DC
+							setvbuf(*file,NULL,_IOFBF,2048);
+#endif
 							fseek (*file, pak->files[i].filepos, SEEK_SET);
+						}
 					}
 					com_filesize = pak->files[i].filelen;
 					return com_filesize;
@@ -1456,6 +1461,9 @@
 			{
 				Sys_FileClose (i);
 				*file = fopen (netpath, "rb");
+#ifdef DC
+				if (*file) setvbuf(*file,NULL,_IOFBF,2048); /* cdrom is 2048 */
+#endif
 			}
 			return com_filesize;
 		}
Common subdirectories: WinQuake.orig/data and WinQuake/data
Only in WinQuake: dc
Common subdirectories: WinQuake.orig/docs and WinQuake/docs
Common subdirectories: WinQuake.orig/dxsdk and WinQuake/dxsdk
Common subdirectories: WinQuake.orig/gas2masm and WinQuake/gas2masm
diff -u -x '*.o' -B WinQuake.orig/gl_draw.c WinQuake/gl_draw.c
--- WinQuake.orig/gl_draw.c	1999-12-22 00:53:24.000000000 +0900
+++ WinQuake/gl_draw.c	2002-07-15 22:42:12.000000000 +0900
@@ -28,7 +28,7 @@
 extern unsigned char d_15to8table[65536];
 
 cvar_t		gl_nobind = {"gl_nobind", "0"};
-cvar_t		gl_max_size = {"gl_max_size", "1024"};
+cvar_t		gl_max_size = {"gl_max_size", "256"};
 cvar_t		gl_picmip = {"gl_picmip", "0"};
 
 byte		*draw_chars;				// 8*8 graphic characters
@@ -65,7 +65,7 @@
 	qboolean	mipmap;
 } gltexture_t;
 
-#define	MAX_GLTEXTURES	1024
+#define	MAX_GLTEXTURES	512	//1024
 gltexture_t	gltextures[MAX_GLTEXTURES];
 int			numgltextures;
 
@@ -101,7 +101,7 @@
 #define	BLOCK_HEIGHT	256
 
 int			scrap_allocated[MAX_SCRAPS][BLOCK_WIDTH];
-byte		scrap_texels[MAX_SCRAPS][BLOCK_WIDTH*BLOCK_HEIGHT*4];
+byte		scrap_texels[MAX_SCRAPS][BLOCK_WIDTH*BLOCK_HEIGHT/* *4 */];
 qboolean	scrap_dirty;
 int			scrap_texnum;
 
@@ -995,6 +995,12 @@
 		}
 	}
 }
+
+#include <stdlib.h>	//for alloca
+
+#define	NOMEM
+#define	MALLOC(s)	alloca(s)
+#define	FREE(p)
 
 /*
 ===============
@@ -1004,7 +1010,11 @@
 void GL_Upload32 (unsigned *data, int width, int height,  qboolean mipmap, qboolean alpha)
 {
 	int			samples;
+#ifdef	NOMEM
+	unsigned	*scaled;
+#else
 static	unsigned	scaled[1024*512];	// [512*256];
+#endif
 	int			scaled_width, scaled_height;
 
 	for (scaled_width = 1 ; scaled_width < width ; scaled_width<<=1)
@@ -1020,7 +1030,12 @@
 	if (scaled_height > gl_max_size.value)
 		scaled_height = gl_max_size.value;
 
+#ifdef	NOMEM
+	scaled = MALLOC(scaled_width * scaled_height * sizeof(*scaled));
+	if (scaled==NULL)
+#else
 	if (scaled_width * scaled_height > sizeof(scaled)/4)
+#endif
 		Sys_Error ("GL_LoadTexture: too big");
 
 	samples = alpha ? gl_alpha_format : gl_solid_format;
@@ -1072,7 +1087,9 @@
 	}
 done: ;
 #endif
-
+#ifdef	NOMEM
+	FREE(scaled);
+#endif
 
 	if (mipmap)
 	{
@@ -1093,8 +1110,13 @@
 	int			p;
 	static unsigned j;
 	int			samples;
+#ifdef	NOMEM
+	unsigned char *scaled;
+#else
     static	unsigned char scaled[1024*512];	// [512*256];
+#endif
 	int			scaled_width, scaled_height;
+	GLenum	internal_fmt;
 
 	s = width*height;
 	// if there are no transparent pixels, make it a 3 component
@@ -1111,23 +1133,42 @@
 		if (alpha && noalpha)
 			alpha = false;
 	}
+
+//	printf("upload:%dx%d\n",width,height);
+
 	for (scaled_width = 1 ; scaled_width < width ; scaled_width<<=1)
 		;
 	for (scaled_height = 1 ; scaled_height < height ; scaled_height<<=1)
 		;
-
+
 	scaled_width >>= (int)gl_picmip.value;
 	scaled_height >>= (int)gl_picmip.value;
+
+#if	DC
+	/* small */
+	if (scaled_width>width && scaled_width>8) scaled_width>>=1;
+	if (scaled_height>height && scaled_height>8) scaled_height>>=1;
+#endif
 
 	if (scaled_width > gl_max_size.value)
 		scaled_width = gl_max_size.value;
 	if (scaled_height > gl_max_size.value)
 		scaled_height = gl_max_size.value;
 
+#ifdef	NOMEM
+	scaled = MALLOC(scaled_width * scaled_height * sizeof(*scaled));
+	if (scaled==NULL)
+#else
 	if (scaled_width * scaled_height > sizeof(scaled))
+#endif
 		Sys_Error ("GL_LoadTexture: too big");
 
 	samples = 1; // alpha ? gl_alpha_format : gl_solid_format;
+#ifdef	DC
+	internal_fmt = alpha?GL_KOS_COLOR_INDEX8_WITHALPHA:GL_COLOR_INDEX8_EXT;
+#else
+	internal_fmt = GL_COLOR_INDEX8_EXT;
+#endif
 
 	texels += scaled_width * scaled_height;
 
@@ -1135,7 +1176,7 @@
 	{
 		if (!mipmap)
 		{
-			glTexImage2D (GL_TEXTURE_2D, 0, GL_COLOR_INDEX8_EXT, scaled_width, scaled_height, 0, GL_COLOR_INDEX , GL_UNSIGNED_BYTE, data);
+			glTexImage2D (GL_TEXTURE_2D, 0, internal_fmt, scaled_width, scaled_height, 0, GL_COLOR_INDEX , GL_UNSIGNED_BYTE, data);
 			goto done;
 		}
 		memcpy (scaled, data, width*height);
@@ -1143,7 +1184,7 @@
 	else
 		GL_Resample8BitTexture (data, width, height, scaled, scaled_width, scaled_height);
 
-	glTexImage2D (GL_TEXTURE_2D, 0, GL_COLOR_INDEX8_EXT, scaled_width, scaled_height, 0, GL_COLOR_INDEX, GL_UNSIGNED_BYTE, scaled);
+	glTexImage2D (GL_TEXTURE_2D, 0, internal_fmt, scaled_width, scaled_height, 0, GL_COLOR_INDEX, GL_UNSIGNED_BYTE, scaled);
 	if (mipmap)
 	{
 		int		miplevel;
@@ -1159,11 +1200,13 @@
 			if (scaled_height < 1)
 				scaled_height = 1;
 			miplevel++;
-			glTexImage2D (GL_TEXTURE_2D, miplevel, GL_COLOR_INDEX8_EXT, scaled_width, scaled_height, 0, GL_COLOR_INDEX, GL_UNSIGNED_BYTE, scaled);
+			glTexImage2D (GL_TEXTURE_2D, miplevel,internal_fmt, scaled_width, scaled_height, 0, GL_COLOR_INDEX, GL_UNSIGNED_BYTE, scaled);
 		}
 	}
 done: ;
-
+#ifdef	NOMEM
+	FREE(scaled);
+#endif
 
 	if (mipmap)
 	{
@@ -1184,7 +1227,11 @@
 */
 void GL_Upload8 (byte *data, int width, int height,  qboolean mipmap, qboolean alpha)
 {
+#ifdef	NOMEM
+	unsigned	*trans = MALLOC(width*height*sizeof(unsigned));
+#else
 static	unsigned	trans[640*480];		// FIXME, temporary
+#endif
 	int			i, s;
 	qboolean	noalpha;
 	int			p;
@@ -1218,11 +1265,24 @@
 			trans[i+3] = d_8to24table[data[i+3]];
 		}
 	}
-
- 	if (VID_Is8bit() && !alpha && (data!=scrap_texels[0])) {
- 		GL_Upload8_EXT (data, width, height, mipmap, alpha);
+
+#ifdef	DC
+	mipmap = false;
+#endif
+ 	if (VID_Is8bit() 
+#ifndef	DC
+ 	&& !alpha && (data!=scrap_texels[0])
+#endif
+	) {
+#ifdef	NOMEM
+		FREE(trans);
+#endif
+		GL_Upload8_EXT (data, width, height, mipmap, alpha);
  		return;
 	}
+#ifdef	NOMEM
+		FREE(trans);
+#endif
 	GL_Upload32 (trans, width, height, mipmap, alpha);
 }
 
diff -u -x '*.o' -B WinQuake.orig/gl_rsurf.c WinQuake/gl_rsurf.c
--- WinQuake.orig/gl_rsurf.c	1999-12-22 00:53:24.000000000 +0900
+++ WinQuake/gl_rsurf.c	2002-07-24 12:51:38.000000000 +0900
@@ -52,7 +52,7 @@
 
 // the lightmap texture data needs to be kept in
 // main memory so texsubimage can update properly
-byte		lightmaps[4*MAX_LIGHTMAPS*BLOCK_WIDTH*BLOCK_HEIGHT];
+byte		lightmaps[1*MAX_LIGHTMAPS*BLOCK_WIDTH*BLOCK_HEIGHT];
 
 // For gl_texsort 0
 msurface_t  *skychain = NULL;
Only in WinQuake: gl_viddc.c
diff -u -x '*.o' -B WinQuake.orig/host_cmd.c WinQuake/host_cmd.c
--- WinQuake.orig/host_cmd.c	1999-12-22 00:53:24.000000000 +0900
+++ WinQuake/host_cmd.c	2002-07-15 14:47:02.000000000 +0900
@@ -447,16 +447,19 @@
 	for (i=0 ; i<SAVEGAME_COMMENT_LENGTH ; i++)
 		text[i] = ' ';
 	memcpy (text, cl.levelname, strlen(cl.levelname));
-	sprintf (kills,"kills:%3i/%3i", cl.stats[STAT_MONSTERS], cl.stats[STAT_TOTALMONSTERS]);
+	sprintf (kills,"kills:%3i/%3i", cl.stats[STAT_MONSTERS], cl.stats[STAT_TOTALMONSTERS]); /* 13 */
+#ifdef DC
+	memcpy (text+(32-13), kills, strlen(kills));
+#else
 	memcpy (text+22, kills, strlen(kills));
 // convert space to _ to make stdio happy
 	for (i=0 ; i<SAVEGAME_COMMENT_LENGTH ; i++)
 		if (text[i] == ' ')
 			text[i] = '_';
 	text[SAVEGAME_COMMENT_LENGTH] = '\0';
+#endif
 }
 
-
 /*
 ===============
 Host_Savegame_f
@@ -462,10 +465,34 @@
 Host_Savegame_f
 ===============
 */
+#ifdef DC
+#include "vmuheader.h"
+extern char *get_savedir(void);
+#define	com_gamedir	get_savedir()
+#include <unistd.h>
+#include <fcntl.h>
+
+#endif
+
+#ifdef	USE_ZLIB
+#include <zlib.h>
+#define	fopen	gzopen
+#define	fdopen	gzdopen
+#define	fprintf	gzprintf
+#define	fscanf(f,fmt,arg)	do { gzgets(f,str,sizeof(str));sscanf(str,fmt,arg); } while(0)
+#define	feof	gzeof
+#define	fgetc	gzgetc
+#define	fclose	gzclose
+#endif
+
 void Host_Savegame_f (void)
 {
 	char	name[256];
+#ifdef	USE_ZLIB
+	gzFile	f;
+#else
 	FILE	*f;
+#endif
 	int		i;
 	char	comment[SAVEGAME_COMMENT_LENGTH+1];
 
@@ -511,20 +538,36 @@
 		}
 	}
 
-	sprintf (name, "%s/%s", com_gamedir, Cmd_Argv(1));
+	sprintf (name, "%s/%s", com_gamedir, Cmd_Argv(1));
 	COM_DefaultExtension (name, ".sav");
 	
 	Con_Printf ("Saving game to %s...\n", name);
+#ifdef DC
+	{ int fd;
+	fd = _open (name, O_WRONLY);
+	if (fd==-1)
+	{
+		Con_Printf ("ERROR: couldn't open.\n");
+		return;
+	}
+
+	Host_SavegameComment (comment);
+	memcpy(vmuheader.desc_dc,comment,sizeof(vmuheader.desc_dc));
+	_write(fd,&vmuheader,sizeof(vmuheader));
+	f = fdopen(fd,"wb");
+	}
+#else
 	f = fopen (name, "w");
 	if (!f)
 	{
 		Con_Printf ("ERROR: couldn't open.\n");
 		return;
 	}
-	
+
 	fprintf (f, "%i\n", SAVEGAME_VERSION);
 	Host_SavegameComment (comment);
-	fprintf (f, "%s\n", comment);
+	fprintf (f, "%s\n", comment);
+#endif
 	for (i=0 ; i<NUM_SPAWN_PARMS ; i++)
 		fprintf (f, "%f\n", svs.clients->spawn_parms[i]);
 	fprintf (f, "%d\n", current_skill);
@@ -546,7 +589,7 @@
 	for (i=0 ; i<sv.num_edicts ; i++)
 	{
 		ED_Write (f, EDICT_NUM(i));
-		fflush (f);
+	//	fflush (f);
 	}
 	fclose (f);
 	Con_Printf ("done.\n");
@@ -561,10 +604,18 @@
 void Host_Loadgame_f (void)
 {
 	char	name[MAX_OSPATH];
+#ifdef	USE_ZLIB
+	gzFile	f;
+#else
 	FILE	*f;
+#endif
 	char	mapname[MAX_QPATH];
 	float	time, tfloat;
+#ifdef	DC
+	char	str[8192], *start;
+#else
 	char	str[32768], *start;
+#endif
 	int		i, r;
 	edict_t	*ent;
 	int		entnum;
@@ -590,13 +641,27 @@
 //	SCR_BeginLoadingPlaque ();
 
 	Con_Printf ("Loading game from %s...\n", name);
+
+#ifdef DC
+	{ int fd;
+	fd = _open (name, O_RDONLY);
+	if (fd==-1)
+	{
+		Con_Printf ("ERROR: couldn't open.\n");
+		return;
+	}
+
+	_lseek(fd,sizeof(vmuheader),SEEK_SET);
+	f = fdopen(fd,"rb");
+	}
+#else
 	f = fopen (name, "r");
 	if (!f)
 	{
 		Con_Printf ("ERROR: couldn't open.\n");
 		return;
 	}
-
+
 	fscanf (f, "%i\n", &version);
 	if (version != SAVEGAME_VERSION)
 	{
@@ -605,6 +670,7 @@
 		return;
 	}
 	fscanf (f, "%s\n", str);
+#endif
 	for (i=0 ; i<NUM_SPAWN_PARMS ; i++)
 		fscanf (f, "%f\n", &spawn_parms[i]);
 // this silliness is so we can load 1.06 save files, which have float skill values
@@ -620,6 +686,8 @@
 
 	fscanf (f, "%s\n",mapname);
 	fscanf (f, "%f\n",&time);
+
+//	printf("%s\n",mapname);
 
 	CL_Disconnect_f ();
 	
@@ -705,6 +773,16 @@
 		Host_Reconnect_f ();
 	}
 }
+
+#ifdef	USE_ZLIB
+#undef	fopen
+#undef	fdopen
+#undef	fprintf
+#undef	fscanf
+#undef	feof
+#undef	fgetc
+#undef	fclose
+#endif
 
 #ifdef QUAKE2
 void SaveGamestate()
Only in WinQuake: in_dc.c
Common subdirectories: WinQuake.orig/kit and WinQuake/kit
diff -u -x '*.o' -B WinQuake.orig/mathlib.c WinQuake/mathlib.c
--- WinQuake.orig/mathlib.c	1999-12-22 00:53:24.000000000 +0900
+++ WinQuake/mathlib.c	2002-07-14 15:55:08.000000000 +0900
@@ -367,7 +367,7 @@
 	cross[2] = v1[0]*v2[1] - v1[1]*v2[0];
 }
 
-double sqrt(double x);
+//double sqrt(double x);
 
 vec_t Length(vec3_t v)
 {
diff -u -x '*.o' -B WinQuake.orig/menu.c WinQuake/menu.c
--- WinQuake.orig/menu.c	1999-12-22 00:53:24.000000000 +0900
+++ WinQuake/menu.c	2002-07-24 12:54:58.000000000 +0900
@@ -442,6 +442,11 @@
 #define	MAX_SAVEGAMES		12
 char	m_filenames[MAX_SAVEGAMES][SAVEGAME_COMMENT_LENGTH+1];
 int		loadable[MAX_SAVEGAMES];
+
+#ifdef	DC
+#include "vmuheader.h"
+extern char* get_savedir(void);
+#endif
 
 void M_ScanSaves (void)
 {
@@ -449,7 +454,29 @@
 	char	name[MAX_OSPATH];
 	FILE	*f;
 	int		version;
-
+
+#ifdef DC
+	char *savedir = get_savedir();
+	int dir = opendir(savedir); /* quick hack for dir cache */
+	for (i=0 ; i<MAX_SAVEGAMES ; i++)
+	{
+		strcpy (m_filenames[i], "--- UNUSED SLOT ---");
+		loadable[i] = false;
+		sprintf (name, "%s/s%i.sav", savedir, i);
+		f = fopen (name, "r");
+		if (!f)
+			continue;
+		//fseek(f,16,SEEK_SET);
+		setvbuf(f,NULL,_IOFBF,512);
+		fread(m_filenames[i],1,16,f); /* instead of seek */
+		fread(m_filenames[i],1,32,f);
+		m_filenames[i][32] = 0;
+	// change _ back to space
+		loadable[i] = true;
+		fclose (f);
+	}
+	if (dir!=0) closedir(dir);
+#else
 	for (i=0 ; i<MAX_SAVEGAMES ; i++)
 	{
 		strcpy (m_filenames[i], "--- UNUSED SLOT ---");
@@ -461,14 +488,14 @@
 		fscanf (f, "%i\n", &version);
 		fscanf (f, "%79s\n", name);
 		strncpy (m_filenames[i], name, sizeof(m_filenames[i])-1);
-
-	// change _ back to space
 		for (j=0 ; j<SAVEGAME_COMMENT_LENGTH ; j++)
 			if (m_filenames[i][j] == '_')
 				m_filenames[i][j] = ' ';
+	// change _ back to space
 		loadable[i] = true;
 		fclose (f);
 	}
+#endif
 }
 
 void M_Menu_Load_f (void)
diff -u -x '*.o' -B WinQuake.orig/net_udp.c WinQuake/net_udp.c
--- WinQuake.orig/net_udp.c	1999-12-22 03:40:46.000000000 +0900
+++ WinQuake/net_udp.c	2002-07-08 22:45:38.000000000 +0900
@@ -22,12 +22,16 @@
 #include "quakedef.h"
 
 #include <sys/types.h>
-#include <sys/socket.h>
-#include <netinet/in.h>
-#include <netdb.h>
-#include <sys/param.h>
-#include <sys/ioctl.h>
+//#include <sys/socket.h>
+//#include <netinet/in.h>
+#include "dc/netdb.h"
+//#include <sys/param.h>
+//#include <sys/ioctl.h>
 #include <errno.h>
+
+#include <lwip/arch.h>
+#define	LWIP_COMPAT_SOCKETS
+#include <lwip/sockets.h>
 
 #ifdef __sun__
 #include <sys/filio.h>
@@ -37,8 +41,10 @@
 #include <libc.h>
 #endif
 
+/*
 extern int gethostname (char *, int);
 extern int close (int);
+*/
 
 extern cvar_t hostname;
 
@@ -59,7 +65,7 @@
 	char	buff[MAXHOSTNAMELEN];
 	struct qsockaddr addr;
 	char *colon;
-	
+	
 	if (COM_CheckParm ("-noudp"))
 		return -1;
 
@@ -133,9 +139,11 @@
 
 	if ((newsocket = socket (PF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1)
 		return -1;
-
+
+#if	0
 	if (ioctl (newsocket, FIONBIO, (char *)&_true) == -1)
 		goto ErrorReturn;
+#endif
 
 	address.sin_family = AF_INET;
 	address.sin_addr.s_addr = INADDR_ANY;
@@ -232,9 +240,10 @@
 
 	if (net_acceptsocket == -1)
 		return -1;
-
+#if 0
 	if (ioctl (net_acceptsocket, FIONREAD, &available) == -1)
 		Sys_Error ("UDP: ioctlsocket (FIONREAD) failed\n");
+#endif
 	if (available)
 		return net_acceptsocket;
 	return -1;
@@ -259,9 +268,11 @@
 {
 	int				i = 1;
 
+#if 0
 	// make this socket broadcast capable
 	if (setsockopt(socket, SOL_SOCKET, SO_BROADCAST, (char *)&i, sizeof(i)) < 0)
 		return -1;
+#endif
 	net_broadcastsocket = socket;
 
 	return 0;
diff -u -x '*.o' -B WinQuake.orig/pr_edict.c WinQuake/pr_edict.c
--- WinQuake.orig/pr_edict.c	1999-12-22 00:53:26.000000000 +0900
+++ WinQuake/pr_edict.c	2002-07-11 21:29:22.000000000 +0900
@@ -270,6 +270,16 @@
 }
 
 
+static int f_tostring(char *s,const char *fmt,float _float)
+{
+	int i,len;
+	len = sprintf (s, fmt, _float);
+	for(i=len-1;i>0 && s[i]=='0';i--) ;
+	if (s[i]!='.') i++;
+	s[i] = 0;
+	return i;
+}
+
 /*
 ============
 PR_ValueString
@@ -305,10 +315,19 @@
 		sprintf (line, "void");
 		break;
 	case ev_float:
-		sprintf (line, "%5.1f", val->_float);
+	//	sprintf (line, "%5.1f", val->_float);
+		f_tostring(line,"%5.1f",val->_float);
 		break;
 	case ev_vector:
-		sprintf (line, "'%5.1f %5.1f %5.1f'", val->vector[0], val->vector[1], val->vector[2]);
+	//	sprintf (line, "'%5.1f %5.1f %5.1f'", val->vector[0], val->vector[1], val->vector[2]);
+		{ char *p=line;
+		p += f_tostring(p,"%5.1f",val->vector[0]);
+		*p++ = ' ';
+		p += f_tostring(p,"%5.1f",val->vector[1]);
+		*p++ = ' ';
+		p += f_tostring(p,"%5.1f",val->vector[2]);
+		*p = 0;
+		}
 		break;
 	case ev_pointer:
 		sprintf (line, "pointer");
@@ -357,10 +376,19 @@
 		sprintf (line, "void");
 		break;
 	case ev_float:
-		sprintf (line, "%f", val->_float);
+//		sprintf (line, "%f", val->_float);
+		f_tostring(line,"%f",val->_float);
 		break;
 	case ev_vector:
-		sprintf (line, "%f %f %f", val->vector[0], val->vector[1], val->vector[2]);
+//		sprintf (line, "%f %f %f", val->vector[0], val->vector[1], val->vector[2]);
+		{ char *p=line;
+		p += f_tostring(p,"%f",val->vector[0]);
+		*p++ = ' ';
+		p += f_tostring(p,"%f",val->vector[1]);
+		*p++ = ' ';
+		p += f_tostring(p,"%f",val->vector[2]);
+		*p = 0;
+		}
 		break;
 	default:
 		sprintf (line, "bad type %i", type);
@@ -482,8 +510,18 @@
 For savegames
 =============
 */
+#ifdef	USE_ZLIB
+#include <zlib.h>
+
+#define	fprintf	gzprintf
+
+void ED_Write (FILE *file, edict_t *ed)
+{
+	gzFile	f = (gzFile)file;
+#else
 void ED_Write (FILE *f, edict_t *ed)
 {
+#endif
 	ddef_t	*d;
 	int		*v;
 	int		i, j;
@@ -613,8 +651,14 @@
 ED_WriteGlobals
 =============
 */
+#ifdef	USE_ZLIB
+void ED_WriteGlobals (FILE *file)
+{
+	gzFile	f = (gzFile)file;
+#else
 void ED_WriteGlobals (FILE *f)
 {
+#endif
 	ddef_t		*def;
 	int			i;
 	char		*name;
@@ -640,6 +684,9 @@
 	}
 	fprintf (f,"}\n");
 }
+#ifdef	USE_ZLIB
+#undef	fprintf
+#endif
 
 /*
 =============
@@ -976,7 +1023,7 @@
 	Con_DPrintf ("%i entities inhibited\n", inhibit);
 }
 
-
+#include <assert.h>
 /*
 ===============
 PR_LoadProgs
Common subdirectories: WinQuake.orig/scitech and WinQuake/scitech
diff -u -x '*.o' -B WinQuake.orig/screen.c WinQuake/screen.c
--- WinQuake.orig/screen.c	1999-12-22 00:53:26.000000000 +0900
+++ WinQuake/screen.c	2002-07-24 15:19:24.000000000 +0900
@@ -762,6 +762,7 @@
 	{
 		key_count = -1;		// wait for a key down and up
 		Sys_SendKeyEvents ();
+		IN_Commands(); /* joystick send key event  by BERO */
 	} while (key_lastpress != 'y' && key_lastpress != 'n' && key_lastpress != K_ESCAPE);
 
 	scr_fullupdate = 0;
Only in WinQuake: snd_dc.c
diff -u -x '*.o' -B WinQuake.orig/snd_dma.c WinQuake/snd_dma.c
--- WinQuake.orig/snd_dma.c	1999-12-22 00:53:26.000000000 +0900
+++ WinQuake/snd_dma.c	2002-07-02 14:03:58.000000000 +0900
@@ -166,6 +166,11 @@
 */
 void S_Init (void)
 {
+	/* in my view, S_Init called twice in host.c when #ifndef _WIN32 and #ifdef GLQUAKE
+		BERO
+	*/
+
+	if (snd_initialized) return;
 
 	Con_Printf("\nSound Initialization\n");
 
@@ -872,7 +877,7 @@
 	}
 
 // mix ahead of current position
-	endtime = soundtime + _snd_mixahead.value * shm->speed;
+	endtime = soundtime + (((int)(_snd_mixahead.value * shm->speed)+3)&~3);
 	samps = shm->samples >> (shm->channels-1);
 	if (endtime - soundtime > samps)
 		endtime = soundtime + samps;
Only in WinQuake: snd_dmy.c
Only in WinQuake: snd_mem_dc.c
diff -u -x '*.o' -B WinQuake.orig/snd_mix.c WinQuake/snd_mix.c
--- WinQuake.orig/snd_mix.c	1999-12-22 00:53:26.000000000 +0900
+++ WinQuake/snd_mix.c	2002-06-30 19:45:56.000000000 +0900
@@ -29,7 +29,7 @@
 
 #define	PAINTBUFFER_SIZE	512
 portable_samplepair_t paintbuffer[PAINTBUFFER_SIZE];
-int		snd_scaletable[32][256];
+/*int*/	short	snd_scaletable[32][256];
 int 	*snd_p, snd_linear_count, snd_vol;
 short	*snd_out;
 
Only in WinQuake: snd_mix_dc.c
Only in WinQuake: snddma_dc.c
diff -u -x '*.o' -B WinQuake.orig/sound.h WinQuake/sound.h
--- WinQuake.orig/sound.h	1999-12-22 00:54:20.000000000 +0900
+++ WinQuake/sound.h	2002-06-30 23:16:20.000000000 +0900
@@ -131,7 +131,7 @@
 #define	MAX_DYNAMIC_CHANNELS	8
 
 
-extern	channel_t   channels[MAX_CHANNELS];
+extern	channel_t   channels[/*MAX_CHANNELS*/];
 // 0 to MAX_DYNAMIC_CHANNELS-1	= normal entity sounds
 // MAX_DYNAMIC_CHANNELS to MAX_DYNAMIC_CHANNELS + NUM_AMBIENTS -1 = water, etc
 // MAX_DYNAMIC_CHANNELS + NUM_AMBIENTS to total_channels = static sounds
Only in WinQuake: spu_malloc.c
Only in WinQuake: sys_dc.c
Only in WinQuake: vid_dc.c
diff -u -x '*.o' -B WinQuake.orig/view.c WinQuake/view.c
--- WinQuake.orig/view.c	1999-12-22 00:53:26.000000000 +0900
+++ WinQuake/view.c	2002-06-25 12:57:34.000000000 +0900
@@ -268,7 +268,7 @@
 void BuildGammaTable (float g)
 {
 	int		i, inf;
-	
+
 	if (g == 1.0)
 	{
 		for (i=0 ; i<256 ; i++)
Only in WinQuake: vmuheader.c
Only in WinQuake: vmuheader.h
Only in WinQuake: zone_snd.c
